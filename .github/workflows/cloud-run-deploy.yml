name: CI/CD para Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: mi-servicio-python
  REGION: us-central1

jobs:
  test:
    name: Pruebas
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v3
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
        
    - name: Ejecutar pruebas unitarias y de integración
      run: |
        pytest tests/ --cov=./ --cov-report=xml
        
    - name: Subir resultados de cobertura
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

  build-and-deploy:
    name: Construir y Desplegar
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout del código
      uses: actions/checkout@v3
      
    - name: Autenticación en Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Configurar Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configurar Docker para usar gcloud
      run: gcloud auth configure-docker
      
    - name: Obtener versión anterior para posible rollback
      id: get-prev-version
      run: |
        PREV_VERSION=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format="value(metadata.name)" 2>/dev/null || echo "no-previous-version")
        echo "PREV_VERSION=$PREV_VERSION" >> $GITHUB_ENV
        echo "PREV_VERSION=$PREV_VERSION" >> $GITHUB_OUTPUT
      continue-on-error: true
      
    - name: Construir y publicar imagen Docker
      id: build-image
      run: |
        IMAGE_NAME=gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_OUTPUT
        
    - name: Desplegar en Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        region: ${{ env.REGION }}
        image: ${{ env.IMAGE_NAME }}
        env_vars: |
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          BIGQUERY_DATASET=${{ secrets.BIGQUERY_DATASET }}
          BIGQUERY_TABLE=${{ secrets.BIGQUERY_TABLE }}
          GOOGLE_APPLICATION_CREDENTIALS=/tmp/credentials.json
          API_KEY=${{ secrets.API_KEY }}
        
    - name: Verificar despliegue
      id: verify-deployment
      run: |
        echo "Verificando nuevo despliegue en ${{ steps.deploy.outputs.url }}"
        STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.url }}/health || echo "failed")
        echo "Status code: $STATUS_CODE"
        if [[ "$STATUS_CODE" != "200" ]]; then
          echo "El despliegue no respondió correctamente. Iniciando rollback."
          exit 1
        fi
      continue-on-error: true
      
    - name: Rollback si falló la verificación
      if: steps.verify-deployment.outcome == 'failure' && env.PREV_VERSION != 'no-previous-version'
      run: |
        echo "Realizando rollback a la versión anterior..."
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=${{ env.PREV_VERSION }}=100
        echo "Rollback completado." 